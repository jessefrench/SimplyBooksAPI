// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SimplyBooksAPI.Migrations
{
    [DbContext(typeof(SimplyBooksDbContext))]
    [Migration("20241003232618_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimplyBooks.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "j.austen@example.com",
                            Favorite = true,
                            FirstName = "Jane",
                            Image = "https://example.com/images/jane_austen.jpg",
                            LastName = "Austen",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "g.orwell@example.com",
                            Favorite = true,
                            FirstName = "George",
                            Image = "https://example.com/images/george_orwell.jpg",
                            LastName = "Orwell",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "a.christie@example.com",
                            Favorite = false,
                            FirstName = "Agatha",
                            Image = "https://example.com/images/agatha_christie.jpg",
                            LastName = "Christie",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "jk.rowling@example.com",
                            Favorite = false,
                            FirstName = "J.K.",
                            Image = "https://example.com/images/jk_rowling.jpg",
                            LastName = "Rowling",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SimplyBooks.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Sale")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "A classic novel of manners.",
                            Image = "https://example.com/images/pride_prejudice.jpg",
                            Price = 9.99m,
                            Sale = false,
                            Title = "Pride and Prejudice",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Description = "A dystopian social science fiction novel.",
                            Image = "https://example.com/images/1984.jpg",
                            Price = 14.99m,
                            Sale = true,
                            Title = "1984",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Description = "A famous detective novel.",
                            Image = "https://example.com/images/orient_express.jpg",
                            Price = 12.99m,
                            Sale = false,
                            Title = "Murder on the Orient Express",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Description = "The first book in the Harry Potter series.",
                            Image = "https://example.com/images/hp_sorcerer_stone.jpg",
                            Price = 19.99m,
                            Sale = true,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SimplyBooks.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "booklover@example.com",
                            Username = "booklover"
                        },
                        new
                        {
                            Id = 2,
                            Email = "genius@example.com",
                            Username = "literarygenius"
                        },
                        new
                        {
                            Id = 3,
                            Email = "avid@example.com",
                            Username = "avidreader"
                        });
                });

            modelBuilder.Entity("SimplyBooks.Models.Book", b =>
                {
                    b.HasOne("SimplyBooks.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyBooks.Models.User", null)
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SimplyBooks.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SimplyBooks.Models.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
